plugins {
    id 'com.android.application'
}

android {
    compileSdkVersion 31
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.lxc.jni_fmod"
        minSdkVersion 23
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                //cppFlags "" //写空串的话，默认是支持四种架构指令的手机平台。

                //TODO 第四步: 指定cmake只使用armeabi-v7a的CPU架构。CMAKE_ANDROID_ARCH_ABI只会有"armeabi-v7a"。
                abiFilters "armeabi-v7a"
            }
        }

        /**
         * 没有ndk这个函数时，生成apk时，会有四种CPU架构的so库。
         */
        ndk {
            // TODO 第五步: 决定了apk生成时，lib路径下只有"armeabi-v7a"的CPU架构的so库。
            abiFilters("armeabi-v7a")
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            //下面的代码修改路径后，src/main/cpp/CMakeLists.txt会失效，启用修改后路径下的CMakeLists.txt
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2" // Cmake使用的版本。
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    //TODO 第六步: 引入fmod.jar
//    implementation files('libs\\fmod.jar')

    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation files('libs/fmod.jar')
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}